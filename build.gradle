plugins {
    id "org.jetbrains.intellij" version "0.1.10"
    id "com.github.hierynomus.license" version "0.12.1"
}

group = 'com.samebug.clients.idea'
description = 'Samebug for IntelliJ IDEA'
version '0.15.0-SNAPSHOT' +
        (project.hasProperty('buildNumber') ? '+' + project.getProperty('buildNumber') : '') +
        '+idea'

apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

allprojects {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
}

intellij {
    version = project.hasProperty('ideaVersion') ? ideaVersion : 'IC-2016.3'

//    alternativeIdePath '/opt/idea-IC-141.178.9'
//    alternativeIdePath '/opt/idea-IU-143.382.35'
//    alternativeIdePath '/opt/idea-IU-145.972.3'
//    alternativeIdePath '/opt/idea-IC-162.2228.15'
//    alternativeIdePath '/opt/idea-IU-163.7743.44'
//    alternativeIdePath '/opt/idea-IU-171.2272.14'
    pluginName 'samebug-idea-plugin'
    updateSinceUntilBuild false

    publish {
        username project.hasProperty('JETBRAINS_USERNAME') ? project.getProperty('JETBRAINS_USERNAME') : null
        password project.hasProperty('JETBRAINS_PASSWORD') ? project.getProperty('JETBRAINS_PASSWORD') : null
        channel project.hasProperty('JETBRAINS_CHANNEL') ? project.getProperty('JETBRAINS_CHANNEL') : null
    }
    systemProperty("awt.useSystemAAFontSettings", "on")
    systemProperty("swing.aatext", "true")
}

sourceSets {
    main {
        java.srcDir 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
    compile 'com.google.code.gson:gson:2.6.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'joda-time:joda-time:2.9.7'
}

license {
    strictCheck true
    header project.file('licenses/HEADER.txt')
    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
        name = "Samebug, Inc."
        email = "hello@samebug.io"
    }
    mapping {
        form = 'XML_STYLE'
        java = 'SLASHSTAR_STYLE'
    }

    include "**/*.java"
    include "**/*.form"
    exclude "**/*Test.java"
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

test {
    exclude 'com/samebug/clients/http/**'
    exclude 'com/samebug/clients/swing/ui/**'
}

task httpTest(type: Test, description: 'Run http client tests') {
    include 'com/samebug/clients/http/**'
}

task uiTest(type: Test, description: 'Run swing ui tests') {
    include 'com/samebug/clients/swing/ui/**'
}
